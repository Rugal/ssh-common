package ml.rugal.sshcommon.hibernate;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.type.Type;

/**
 *
 * A great useful Finder class used in hibernate session.<BR>
 * Already include many SELECTION method generated by HQL.
 *
 * @author Rugal Bernstein
 */
public class Finder
{

    protected Finder()
    {
        hqlBuilder = new StringBuilder();
    }

    protected Finder(String hql)
    {
        hqlBuilder = new StringBuilder(hql);
    }

    public static Finder create()
    {
        return new Finder();
    }

    /**
     * Create finder with HQL.
     *
     * @param hql Given SQL as finder content.
     * <p>
     * @return parameter HQL contented finder.
     */
    public static Finder create(String hql)
    {
        return new Finder(hql);
    }

    /**
     * Append SQL onto existed HQL
     *
     * @param hql new HQL to append.
     * <p>
     * @return current finder object.
     */
    public Finder append(String hql)
    {
        hqlBuilder.append(hql);
        return this;
    }

    /**
     * Get the original HQL generated by this HQL builder
     *
     * @return the original string or HQL
     */
    public String getOrigHql()
    {
        return hqlBuilder.toString();
    }

    /**
     * Count the row number of result set fetched from database.
     *
     * @return row number counted
     */
    public String getRowCountHql()
    {
        String hql = hqlBuilder.toString();

        int fromIndex = hql.toLowerCase().indexOf(FROM);
        String projectionHql = hql.substring(0, fromIndex);

        hql = hql.substring(fromIndex);
        String rowCountHql = hql.replace(HQL_FETCH, "");

        int index = rowCountHql.indexOf(ORDER_BY);
        if (index > 0)
        {
            rowCountHql = rowCountHql.substring(0, index);
        }
        return wrapProjection(projectionHql) + rowCountHql;
    }

    public int getFirstResult()
    {
        return firstResult;
    }

    public void setFirstResult(int firstResult)
    {
        this.firstResult = firstResult;
    }

    public int getMaxResults()
    {
        return maxResults;
    }

    public void setMaxResults(int maxResults)
    {
        this.maxResults = maxResults;
    }

    public boolean isCacheable()
    {
        return cacheable;
    }

    public void setCacheable(boolean cacheable)
    {
        this.cacheable = cacheable;
    }

    /**
     * Set predicate for query.
     *
     * @param param the parameter name
     * @param value the parameter value for
     * <p>
     * @return current finder object for concatenation
     */
    public Finder setParam(String param, Object value)
    {
        return setParam(param, value, null);
    }

    /**
     * Set query predicate for query.
     *
     * @param param parameter name for query
     * @param value parameter value for query
     * @param type  parameter type.
     * <p>
     * @return current finder object.
     */
    public Finder setParam(String param, Object value, Type type)
    {
        getParams().add(param);
        getValues().add(value);
        getTypes().add(type);
        return this;
    }

    /**
     *
     * @param paramMap A map for parameters.
     * <p>
     * @return current finder.
     */
    public Finder setParams(Map<String, Object> paramMap)
    {
        for (Map.Entry<String, Object> entry : paramMap.entrySet())
        {
            setParam(entry.getKey(), entry.getValue());
        }
        return this;
    }

    /**
     *
     * @param name The name of a parameter
     * @param vals Corresponding values of parameter
     * @param type The type of this parameter
     * <p>
     * @return Current finder.
     */
    public Finder setParamList(String name, Collection<Object> vals, Type type)
    {
        getParamsList().add(name);
        getValuesList().add(vals);
        getTypesList().add(type);
        return this;
    }

    /**
     *
     * @param name The name of this parameters
     * @param vals parameter value for query
     * <p>
     * @return Current finder
     */
    public Finder setParamList(String name, Collection<Object> vals)
    {
        return setParamList(name, vals, null);
    }

    /**
     *
     * @param name The name of a parameter
     * @param vals Corresponding values of parameter
     * @param type The type of this parameter
     * <p>
     * @return Current finder
     */
    public Finder setParamList(String name, Object[] vals, Type type)
    {
        getParamsArray().add(name);
        getValuesArray().add(vals);
        getTypesArray().add(type);
        return this;
    }

    /**
     *
     * @param name The name of a parameter
     * @param vals Corresponding values of parameter
     * <p>
     * @return Current finder
     */
    public Finder setParamList(String name, Object[] vals)
    {
        return setParamList(name, vals, null);
    }

    /**
     *
     * @param query to be set
     * <p>
     * @return Current query
     */
    public Query setParamsToQuery(Query query)
    {
        if (params != null)
        {
            for (int i = 0; i < params.size(); i++)
            {
                if (types.get(i) == null)
                {
                    query.setParameter(params.get(i), values.get(i));
                }
                else
                {
                    query.setParameter(params.get(i), values.get(i), types.get(i));
                }
            }
        }
        if (paramsList != null)
        {
            for (int i = 0; i < paramsList.size(); i++)
            {
                if (typesList.get(i) == null)
                {
                    query.setParameterList(paramsList.get(i), valuesList.get(i));
                }
                else
                {
                    query.setParameterList(paramsList.get(i),
                                           valuesList.get(i), typesList.get(i));
                }
            }
        }
        if (paramsArray != null)
        {
            for (int i = 0; i < paramsArray.size(); i++)
            {
                if (typesArray.get(i) == null)
                {
                    query.setParameterList(paramsArray.get(i), valuesArray.get(i));
                }
                else
                {
                    query
                        .setParameterList(paramsArray.get(i), valuesArray.get(i), typesArray.get(i));
                }
            }
        }
        return query;
    }

    public Query createQuery(Session s)
    {
        Query query = setParamsToQuery(s.createQuery(getOrigHql()));
        if (getFirstResult() > 0)
        {
            query.setFirstResult(getFirstResult());
        }
        if (getMaxResults() > 0)
        {
            query.setMaxResults(getMaxResults());
        }
        if (isCacheable())
        {
            query.setCacheable(true);
        }
        return query;
    }

    private String wrapProjection(String projection)
    {
        if (!projection.contains("select"))
        {
            return ROW_COUNT;
        }
        else
        {
            return projection.replace("select", "select count(") + ") ";
        }
    }

    private List<String> getParams()
    {
        if (params == null)
        {
            params = new ArrayList<>();
        }
        return params;
    }

    private List<Object> getValues()
    {
        if (values == null)
        {
            values = new ArrayList<>();
        }
        return values;
    }

    private List<Type> getTypes()
    {
        if (types == null)
        {
            types = new ArrayList<>();
        }
        return types;
    }

    private List<String> getParamsList()
    {
        if (paramsList == null)
        {
            paramsList = new ArrayList<>();
        }
        return paramsList;
    }

    private List<Collection<Object>> getValuesList()
    {
        if (valuesList == null)
        {
            valuesList = new ArrayList<>();
        }
        return valuesList;
    }

    private List<Type> getTypesList()
    {
        if (typesList == null)
        {
            typesList = new ArrayList<>();
        }
        return typesList;
    }

    private List<String> getParamsArray()
    {
        if (paramsArray == null)
        {
            paramsArray = new ArrayList<>();
        }
        return paramsArray;
    }

    private List<Object[]> getValuesArray()
    {
        if (valuesArray == null)
        {
            valuesArray = new ArrayList<>();
        }
        return valuesArray;
    }

    private List<Type> getTypesArray()
    {
        if (typesArray == null)
        {
            typesArray = new ArrayList<>();
        }
        return typesArray;
    }

    private StringBuilder hqlBuilder;

    private List<String> params;

    private List<Object> values;

    private List<Type> types;

    private List<String> paramsList;

    private List<Collection<Object>> valuesList;

    private List<Type> typesList;

    private List<String> paramsArray;

    private List<Object[]> valuesArray;

    private List<Type> typesArray;

    private int firstResult = 0;

    private int maxResults = 0;

    private boolean cacheable = false;

    public static final String ROW_COUNT = "select count(*) ";

    public static final String FROM = "from";

    public static final String DISTINCT = "distinct";

    public static final String HQL_FETCH = "fetch";

    public static final String ORDER_BY = "order";
}
